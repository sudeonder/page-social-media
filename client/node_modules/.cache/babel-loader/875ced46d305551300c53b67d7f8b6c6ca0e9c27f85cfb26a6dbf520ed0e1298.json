{"ast":null,"code":"import { PayloadAction, createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  data: null,\n  loading: false,\n  error: null\n};\n\n// reducers are functions that take the current state and an action,\n// and return a new state\n\nconst postsSlice = createSlice({\n  name: \"posts\",\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchPosts.pending, state => {\n      state.loading = true;\n    }).addCase(fetchPosts.fulfilled, (state, action) => {\n      state.loading = false;\n      state.data = action.payload;\n    }).addCase(fetchPosts.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.error.message;\n    });\n  }\n});\nexport const fetchPosts = createAsyncThunk(\"posts/fetchPosts\", async () => {\n  // fetch data from api\n  // return data as payload\n  await new Promise(resolve => setTimeout(resolve, 1000));\n  return [{\n    id: 1,\n    title: \"Post 1\"\n  }, {\n    id: 2,\n    title: \"Post 2\"\n  }];\n});\nexport const {} = postsSlice.actions;\nexport default postsSlice.reducer;","map":{"version":3,"names":["PayloadAction","createAsyncThunk","createSlice","initialState","data","loading","error","postsSlice","name","reducers","extraReducers","builder","addCase","fetchPosts","pending","state","fulfilled","action","payload","rejected","message","Promise","resolve","setTimeout","id","title","actions","reducer"],"sources":["/Users/sudeonder/Desktop/mern-stack/pages-project/client/src/state/posts/postsSlice.js"],"sourcesContent":["import { PayloadAction, createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n  data: null,\n  loading: false,\n  error: null,\n};\n\n// reducers are functions that take the current state and an action,\n// and return a new state\n\nconst postsSlice = createSlice({\n  name: \"posts\",\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchPosts.pending, (state) => {\n        state.loading = true;\n      })\n      .addCase(fetchPosts.fulfilled, (state, action) => {\n        state.loading = false;\n        state.data = action.payload;\n      })\n      .addCase(fetchPosts.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.error.message;\n      });\n  },\n});\n\nexport const fetchPosts = createAsyncThunk(\"posts/fetchPosts\", async () => {\n  // fetch data from api\n  // return data as payload\n  await new Promise((resolve) => setTimeout(resolve, 1000));\n  return [\n    { id: 1, title: \"Post 1\" },\n    { id: 2, title: \"Post 2\" },\n  ];\n});\n\nexport const {} = postsSlice.actions;\n\nexport default postsSlice.reducer;\n"],"mappings":"AAAA,SAASA,aAAa,EAAEC,gBAAgB,EAAEC,WAAW,QAAQ,kBAAkB;AAE/E,MAAMC,YAAY,GAAG;EACnBC,IAAI,EAAE,IAAI;EACVC,OAAO,EAAE,KAAK;EACdC,KAAK,EAAE;AACT,CAAC;;AAED;AACA;;AAEA,MAAMC,UAAU,GAAGL,WAAW,CAAC;EAC7BM,IAAI,EAAE,OAAO;EACbL,YAAY;EACZM,QAAQ,EAAE,CAAC,CAAC;EACZC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAACC,UAAU,CAACC,OAAO,EAAGC,KAAK,IAAK;MACtCA,KAAK,CAACV,OAAO,GAAG,IAAI;IACtB,CAAC,CAAC,CACDO,OAAO,CAACC,UAAU,CAACG,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MAChDF,KAAK,CAACV,OAAO,GAAG,KAAK;MACrBU,KAAK,CAACX,IAAI,GAAGa,MAAM,CAACC,OAAO;IAC7B,CAAC,CAAC,CACDN,OAAO,CAACC,UAAU,CAACM,QAAQ,EAAE,CAACJ,KAAK,EAAEE,MAAM,KAAK;MAC/CF,KAAK,CAACV,OAAO,GAAG,KAAK;MACrBU,KAAK,CAACT,KAAK,GAAGW,MAAM,CAACX,KAAK,CAACc,OAAO;IACpC,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,OAAO,MAAMP,UAAU,GAAGZ,gBAAgB,CAAC,kBAAkB,EAAE,YAAY;EACzE;EACA;EACA,MAAM,IAAIoB,OAAO,CAAEC,OAAO,IAAKC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;EACzD,OAAO,CACL;IAAEE,EAAE,EAAE,CAAC;IAAEC,KAAK,EAAE;EAAS,CAAC,EAC1B;IAAED,EAAE,EAAE,CAAC;IAAEC,KAAK,EAAE;EAAS,CAAC,CAC3B;AACH,CAAC,CAAC;AAEF,OAAO,MAAM,CAAC,CAAC,GAAGlB,UAAU,CAACmB,OAAO;AAEpC,eAAenB,UAAU,CAACoB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}